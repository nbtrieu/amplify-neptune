schema {
    query: Query
}

type Keyword @model @auth(rules: [{allow: public}]) {
  id: ID!
  uid: String!
  name: String
  KeywordOwners: [Person] @manyToMany(relationName: "KeywordPerson")
}

type Organization @model @auth(rules: [{allow: public}]) {
  id: ID!
  uid: String!
  name: String
  mailing_address: String
  OrganizationMembers: [Person] @manyToMany(relationName: "OrganizationPerson")
}

type Person @model @auth(rules: [{allow: public}]) {
  id: ID!
  uid: String!
  name: String
  email: String
  phone: String
  title: String
  mailing_address: String
  interest_areas: String
  lead_source: String
  event_name: String
  PeopleOrganizations: [Organization] @manyToMany(relationName: "OrganizationPerson")
  PeopleKeywords: [Keyword] @manyToMany(relationName: "KeywordPerson")
}

type NeptunePerson {
  uuid: String!
  customer_id: String
  first_name: String
  last_name: String
  full_name: String
  email: String
  phone: String
  title: String
  organization: String
  mailing_address: String
  interest_areas: String
  lead_source: String
  event_name: String
  social_media: String
  date_of_birth: String
  previous_titles: String
  previous_organizations: String
  tentative_organizations: String
  purchasing_agent: String
  validated_lead_status: String
  status: String
  ingestion_tag: String
  data_source: String
  number_of_cases: Int
  score_case: Float
  quantity: Int
  sales: Float
  number_of_orders: Int
  score_sales: Float
  score_total: Float
  rank: Int
  cases_tier: String
  sales_tier: String
  message_tier: String
  orders_tier: String
}

type NeptuneOrganization {
  uuid: String!
  name: String
  display_name: String
  industry: String
  description: String
  location: String
  mailing_address: String
  website: String
  domain: String
  linkedin_url: String
  specialties: String
  size: String
}

type PublicationProduct {
  uuid: String!
  name: String
  display_name: String
  company: String
  publications: String
}

type AuthorAffiliation {
  author: String
  affiliation: String
  first_author: Boolean
  second_author: Boolean
  equal_contribution: Boolean
  email: String
}

type Publication {
  uuid: String!
  title: String
  doi: String
  publication_date: String
  affiliations: [AuthorAffiliation]
  abstract: String
  source_name: String
  volume: String
  issue: String
  start_page: String
  end_page: String
  keywords: [String]
  publication_type: String
  citations: Int
  references: [String]
  url: String
  notes: String
}

type MarketingCampaign {
  uuid: String!
  name: String
  tags: String
  subject: String
  list: String
  send_time: String  # ISO 8601 datetime as string
  send_weekday: String
  total_recipients: Int
  unique_placed_order: Int
  placed_order_rate: String  # percentage as string
  revenue: Float
  unique_opens: Int
  open_rate: String  # percentage as string
  total_opens: Int
  unique_clicks: Int
  click_rate: String  # percentage as string
  total_clicks: Int
  unsubscribes: Int
  spam_complaints: Int
  spam_complaints_rate: String  # percentage as string
  successful_deliveries: Int
  bounces: Int
  bounce_rate: String  # percentage as string
  campaign_id: String
  campaign_channel: String
  ingestion_tag: String
  data_source: String
}


type Query {
  searchOrganizationsByKeyword(keyword: String!): [NeptuneOrganization]
  searchPublicationsByKeyword(keyword: String!): [Publication]
  searchPublicationProductsByKeyword(keyword: String!): [PublicationProduct]
  searchMarketingCampaignsByKeyword(keyword: String!): [MarketingCampaign]
  searchPublicationsByProduct(product_name: String!): [Publication]
  searchByKeyword(keyword: String!): [NeptunePerson]
  searchByOrganization(organization: String!): [NeptunePerson]
  searchByName(name: String!): [NeptunePerson]
  getNodeCount: Int
  getKeywordUid(keyword: String!): String
}
