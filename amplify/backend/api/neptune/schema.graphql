schema {
    query: Query
}

type Keyword @model @auth(rules: [{allow: public}]) {
  id: ID!
  uid: String!
  name: String
  KeywordOwners: [Person] @manyToMany(relationName: "KeywordPerson")
}

type Organization @model @auth(rules: [{allow: public}]) {
  id: ID!
  uid: String!
  name: String
  mailing_address: String
  OrganizationMembers: [Person] @manyToMany(relationName: "OrganizationPerson")
}

type Person @model @auth(rules: [{allow: public}]) {
  id: ID!
  uid: String!
  name: String
  email: String
  phone: String
  title: String
  mailing_address: String
  interest_areas: String
  lead_source: String
  event_name: String
  PeopleOrganizations: [Organization] @manyToMany(relationName: "OrganizationPerson")
  PeopleKeywords: [Keyword] @manyToMany(relationName: "KeywordPerson")
}

type NeptunePerson {
  uid: String!
  customer_id: String
  first_name: String
  last_name: String
  full_name: String
  email: String
  phone: String
  title: String
  organization: String
  mailing_address: String
  interest_areas: String
  lead_source: String
  event_name: String
  social_media: String
  date_of_birth: String
  previous_titles: String
  previous_organizations: String
  tentative_organizations: String
  purchasing_agent: String
  validated_lead_status: String
  status: String
  ingestion_tag: String
  data_source: String
}

type Query {
  searchByKeyword(keyword: String!): [NeptunePerson]
  searchByOrganization(organization: String!): [NeptunePerson]
  searchByName(name: String!): [NeptunePerson]
  getNodeCount: Int
  getKeywordUid(keyword: String!): String
}
